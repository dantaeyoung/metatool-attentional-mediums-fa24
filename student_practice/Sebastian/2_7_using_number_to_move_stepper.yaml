esphome:
  name: !secret esphome_name

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

# Enable logging
logger:
  level: VERBOSE

# Enable Home Assistant API
api:
  password: ""

ota:
  - platform: esphome
    password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Metatool1 Fallback Hotspot"
    password: "DJjwCeDQqMD1"

captive_portal:

  # Example configuration entry
web_server:
  port: 80

output:
  - platform: ledc
    id: gpio14_output
    pin: GPIO14
    frequency: 1000 Hz

light:
  - platform: monochromatic
    name: "GPIO 14 LED Light"
    output: gpio14_output

  - platform: neopixelbus
    id: "neopixel_light"
    type: GRB
    variant: WS2812
    pin: GPIO48
    num_leds: 60
    name: "NeoPixel Light"

stepper:
  - platform: a4988
    id: stepper1
    step_pin: GPIO11
    dir_pin: GPIO10
    max_speed: 250 steps/s
    acceleration: 500 steps/s^2
    deceleration: 500 steps/s^2

# Script to oscillate the stepper motor
script:
  - id: oscillate_stepper1
    mode: restart
    then:
      - stepper.set_target:
          id: stepper1
          target: -500
      - delay: 2s
      - stepper.set_target:
          id: stepper1
          target: 500
      - delay: 2s


  - id: oscillate_stepper1_and_wait_until_done
    mode: restart
    then:
      - stepper.set_target:
          id: stepper1
          target: -500
      - wait_until:
          condition:
            lambda: 'return id(stepper1).has_reached_target();'
      - stepper.set_target:
          id: stepper1
          target: 500
      - wait_until:
          condition:
            lambda: 'return id(stepper1).has_reached_target();'


  - id: wait_and_oscillate_stepper1
    mode: restart
    then:
      # reset current position to 0
      - stepper.report_position:
          id: stepper1
          position: 0
      # wiggle stepper
      - stepper.set_target:
          id: stepper1
          target: 100
      # wait for 5 seconds
      - delay: 5s
      # move stepper motor by 1000 ticks
      - stepper.set_target:
          id: stepper1
          target: 200
      - stepper.set_target:
          id: stepper1
          target: 0


  - id: move_stepper1_to_target_position
    mode: queued
    then:
      - wait_until:
          condition:
            lambda: 'return id(stepper1).has_reached_target();'
      - stepper.set_target:
          id: stepper1
          target: !lambda 'return (int) id(stepper1_target_position).state;'


number:
  - platform: template
    name: "Stepper1 target position"
    id: stepper1_target_position
    min_value: 10
    max_value: 2000
    step: 1
    optimistic: true

button:
  - platform: template
    name: "Oscillate Stepper1 Button"
    on_press:
      - script.execute: oscillate_stepper1

  - platform: template
    name: "Wait and Oscillate Stepper 1"
    on_press:
      - script.execute: wait_and_oscillate_stepper1 

  - platform: template
    name: "Move Stepper1 To Number Button"
    on_press:
      - script.execute: move_stepper1_to_target_position

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO17
      mode:
        input: true
        pullup: true
    name: "Button 1"
    on_press:
      then:
        - script.execute: oscillate_stepper1_and_wait_until_done
